<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software | QUANTUM</title><link>https://kunwang.info/tag/software/</link><atom:link href="https://kunwang.info/tag/software/index.xml" rel="self" type="application/rss+xml"/><description>software</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 11 May 2022 00:00:00 +0000</lastBuildDate><image><url>https://kunwang.info/media/icon_hua80fed0d19161674393c832b4a1bafa2_7228_512x512_fill_lanczos_center_3.png</url><title>software</title><link>https://kunwang.info/tag/software/</link></image><item><title>Quantum Error Processing Toolkit</title><link>https://kunwang.info/softwares/qep/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://kunwang.info/softwares/qep/</guid><description>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Table of Contents&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;a href="#brief-introduction">Brief Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#functions">Functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#metrics">Metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="#team-contribution">Team Contribution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h3 id="brief-introduction">Brief Introduction&lt;/h3>
&lt;p>I led the development of
&lt;strong>the open-source &lt;a href="https://pypi.org/project/qcompute-qep/" target="_blank" rel="noopener">Quantum Error Processing (QEP)&lt;/a> toolkit&lt;/strong>.
My proficiency in quantum computing has enabled me to identify critical needs and
select the most suitable quantum solutions.
Simultaneously, my expertise in computer science has empowered me to
design robust and efficient data structures, algorithms, and software architectures,
and uphold a well-structured software development life cycle,
ensuring the timely delivery of these solutions with high quality.&lt;/p>
&lt;p>QEP stands at the forefront as an innovative and pioneering open-source quantum error processing toolkit,
representing a core component seamlessly integrated into the
&lt;a href="https://baike.baidu.com/item/%E7%99%BE%E5%BA%A6%E9%87%8F%E5%AD%90%E5%B9%B3%E5%8F%B0" target="_blank" rel="noopener">Baidu Quantum Platform&lt;/a>,
which is a full-stack quantum software and hardware platform developed by Baidu.
This toolkit serves a paramount purpose in characterizing and enhancing the performance of quantum computers
by effectively addressing and mitigating the inherent quantum errors presented in these devices through
sophisticated software solutions.&lt;/p>
&lt;h3 id="functions">Functions&lt;/h3>
&lt;p>QEP boasts a comprehensive suite of four powerful quantum error processing tools:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;span style="color:#DB4437;">&lt;strong>Quantum Performance Evaluation&lt;/strong>&lt;/span>, for assessing the capabilities and extendibilities of quantum computing hardware platforms, through estimating the error rates of quantum states, quantum gates, and quantum measurement apparatus. It provides standard randomized benchmarking, interleaved randomized benchmarking, cross-entropy benchmarking, unitarity randomized benchmarking, direct fidelity estimation, and cross-platform fidelity estimation methods.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="color:#DB4437;">&lt;strong>Quantum Error Characterization&lt;/strong>&lt;/span>, for reconstructing the comprehensive information in quantum computing hardware platforms, through many partial and limited experimental results. It provides quantum state tomography, quantum process tomography, quantum detector tomography, quantum gateset tomography, and spectral quantum tomography.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="color:#DB4437;">&lt;strong>Quantum Error Mitigation&lt;/strong>&lt;/span>, used for improving the accuracy of quantum computational results, through post-processing the experiment data obtained by varying noisy experiments,
extending the computational reach of a noisy superconducting quantum processor. It provides zero-noise extrapolation technique to mitigate quantum gate noise, and a collection of methods such as inverse, least-square, iterative Bayesian unfolding, Neumann series to mitigate quantum measurement noise.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="color:#DB4437;">&lt;strong>Quantum Error Correction&lt;/strong>&lt;/span>, used to protect quantum information from errors due to environmental noise and imperfections in hardware. Quantum computers rely on the delicate properties of quantum systems, which are susceptible to errors, and thus, QEC has become an essential tool for realizing fault-tolerant quantum computing. It provides a simulator that can simulate error correction codes based on the stabilizer formalism, allowing users to study the effects of various types of noise, assess the performance of different error correction codes, and evaluate the robustness of quantum algorithms to errors.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The versatile capabilities embedded in QEP empower our quantum hardware team to engage in a meticulous
and rigorous process of characterizing and enhancing Baidu&amp;rsquo;s quantum processors. By leveraging QEP&amp;rsquo;s advanced tools,
we can delve into the intricate details of quantum performance, understand the characteristics of errors,
implement effective mitigation strategies, and deploy quantum error correction codes.
This comprehensive approach accelerates closed-loop and end-to-end optimizations,
thus playing an instrumental role in advancing the capabilities, robustness, and reliability of
our quantum computing infrastructure. The technology landscape of QEP is as follows.&lt;/p>
&lt;img src="qep-architecture.png" alt="QEP Architecture" width="1024"/>
&lt;h3 id="metrics">Metrics&lt;/h3>
&lt;p>QEP is officially released at &lt;a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A" target="_blank" rel="noopener">&amp;ldquo;Quantum Create 2022&amp;rdquo;&lt;/a>,
a grand quantum developer conference held in Beijing.
The release garnered widespread recognition from mainstream news media, including
&lt;a href="https://analyticsdrift.com/baidu-unveils-its-first-superconducting-quantum-computer-qianshi/" target="_blank" rel="noopener">AnalyticDrift&lt;/a>,
&lt;a href="https://en.pingwest.com/a/10696" target="_blank" rel="noopener">PingWest&lt;/a>,
&lt;a href="https://www.toutiao.com/article/7137927453540237838" target="_blank" rel="noopener">Toutiao&lt;/a>,
&lt;a href="https://mp.weixin.qq.com/s/6jfh_MMypbqHq3KlhYiTew" target="_blank" rel="noopener">QbitAI&lt;/a>, and many others.
Establishing a robust foundation backed by &lt;strong>5&lt;/strong> research papers and over &lt;strong>50&lt;/strong> patent applications,
the latest version, &lt;a href="https://pypi.org/project/qcompute-qep/" target="_blank" rel="noopener">QEP 1.1.0&lt;/a>,
brings unparalleled versatility to quantum hardware access.
This release significantly expands its support to diverse platforms from five leading companies,
further solidifying its position at the forefront of quantum error processing toolkits.
QEP&amp;rsquo;s modular design, founded on the software design philosophy
of &amp;ldquo;high cohesion, loose coupling&amp;rdquo; for effective code organization and
independent functionalities, features &lt;strong>32&lt;/strong> core modules. With a vast repository housing &lt;strong>26,000&lt;/strong>
lines of open-source code, and an extensive library of &lt;strong>37&lt;/strong> bilingual tutorials,
alongside comprehensive API documentation, QEP is designed to be user-friendly, allowing easy access and utilization of its capabilities.&lt;/p>
&lt;p>For more detailed information about QEP, interested parties can
explore the repository on &lt;a href="https://github.com/baidu/QCompute/tree/master/Extensions/QuantumErrorProcessing" target="_blank" rel="noopener">GitHub&lt;/a>
or access the package on &lt;a href="https://pypi.org/project/qcompute-qep/" target="_blank" rel="noopener">PyPI&lt;/a>.
These platforms offer in-depth insights into QEP&amp;rsquo;s features, functionalities, implementation guidelines, and user tutorials.&lt;/p>
&lt;h3 id="team-contribution">Team Contribution&lt;/h3>
&lt;p>The success of QEP is indebted to the invaluable contributions of numerous research interns and engineers.
Through effective management and the implementation of a rotation mechanism,
I established a system that facilitated the swift integration of research interns into the project,
enabling them to make meaningful contributions. To date, &lt;strong>12&lt;/strong> research interns have seamlessly
immersed themselves in the realm of quantum computing,
acquiring expertise in both theoretical and practical aspects of quantum error processing.
Their talents have played a pivotal role in driving innovative projects that push the boundaries of quantum technology.
The sustained fascination these interns exhibit toward quantum computing stands as a testament to the passion and
enthusiasm that I have ignited in these future researchers.
This collaborative effort underscores the collaborative and dynamic nature of the quantum research environment
that has been cultivated within the QEP project.&lt;/p></description></item><item><title>Turing Machine Simulator</title><link>https://kunwang.info/posts/2020-05-06-turing-machine-simulator/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://kunwang.info/posts/2020-05-06-turing-machine-simulator/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I developed a Turing machine simulator when I was a teaching assistant for the course &amp;ldquo;Introduction to Models of Computation&amp;rdquo;.
You can find the project in &lt;a href="https://github.com/kun-wang/turing-machine-simulator" target="_blank" rel="noopener">GitHub&lt;/a>.
It is based on a nice Java Turing machine simulator from &lt;a href="http://introcs.cs.princeton.edu/java/74turing/" target="_blank" rel="noopener">http://introcs.cs.princeton.edu/java/74turing/&lt;/a> with necessary
updates. Feel free to fork, modify it.&lt;/p>
&lt;p>The syntax of Turing machine is totally from the book of
&amp;ldquo;&lt;em>Introduction to Models of Computation&lt;/em>&amp;rdquo; by professor Fangmin Song, which you can buy from &lt;a href="http://www.amazon.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E7%94%9F%E7%B3%BB%E5%88%97%E6%95%99%E6%9D%90-%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%AF%BC%E5%BC%95-%E5%AE%8B%E6%96%B9%E6%95%8F/dp/B008N6TA4U/ref=sr_1_1?ie=UTF8&amp;amp;qid=1421406550&amp;amp;sr=8-1&amp;amp;keywords=%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%AF%BC%E5%BC%95" target="_blank" rel="noopener">Amazon&lt;/a>.&lt;/p>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>&lt;code>bin&lt;/code>: Contains the compiled .class files. The &amp;ldquo;images&amp;rdquo; sub-directory is very important as it stores the required images for the simulator. In the next update, I will try to move it out of the &amp;ldquo;bin&amp;rdquo; directory.&lt;/p>
&lt;p>&lt;code>files&lt;/code>: Contains the program description for specific operations. Examples include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Adder.tur&lt;/strong>: a program for adding two non-negative integers.&lt;/li>
&lt;li>&lt;strong>copyString.tur&lt;/strong>: a program for copy a string of &lt;em>11&amp;hellip;11&lt;/em>s.&lt;/li>
&lt;/ul>
&lt;p>In these two files, I gave a detail description of the requirements for writing a program that can be accepted by the simulator.&lt;/p>
&lt;p>&lt;code>src&lt;/code>: Source files of the simulator.&lt;/p>
&lt;p>&lt;em>All of the above three directories are required for running the simulator.&lt;/em>&lt;/p>
&lt;p>&lt;code>introduction.pptx&lt;/code>: Actually, the Turing machine simulator is a project for the third assignment of the course &lt;strong>Software Architecture&lt;/strong>. &lt;code>introduction.pptx&lt;/code> is my presentation on the course, which introduces basic ideas of the project, and the design patterns that have been applied.&lt;/p>
&lt;p>&lt;code>TMSimulator.7z&lt;/code>: The packed runnable jar, with necessary config files.&lt;/p>
&lt;h2 id="how-to-use">How to Use&lt;/h2>
&lt;p>There are two different ways to setup the simulator.&lt;/p>
&lt;h3 id="method-1-running-the-jar-file">Method 1: Running the jar file&lt;/h3>
&lt;ol>
&lt;li>Download the repository.&lt;/li>
&lt;li>Unpack &lt;code>TMSimulator.7z&lt;/code>.&lt;/li>
&lt;li>Click the &lt;code>run.bat&lt;/code> batch file.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Warnning!&lt;/strong> The &lt;code>files&lt;/code> and &lt;code>TMSimulator.jar&lt;/code> must be in the same directory with &lt;code>run.bat&lt;/code>.&lt;/p>
&lt;h3 id="method-2-importing-the-project-into-eclipse">Method 2: Importing the project into eclipse&lt;/h3>
&lt;ol>
&lt;li>Download the repository.&lt;/li>
&lt;li>Import into eclipse.&lt;/li>
&lt;li>Run it!&lt;/li>
&lt;/ol>
&lt;h2 id="known-problems">Known problems&lt;/h2>
&lt;h3 id="problem-1">Problem 1&lt;/h3>
&lt;p>&lt;strong>Problem Description:&lt;/strong> When exporting the project as a runnable jar (TMSimulator.jar is exported in this way), images cannot be load, as the jar cannot find the images.&lt;br>
&lt;strong>Current Solution:&lt;/strong> This problem happens because the exporting system hasn&amp;rsquo;t add the necessary files in &lt;code>bin/images&lt;/code> into the jar file. There are two solutions:&lt;/p>
&lt;ol>
&lt;li>Modify the code to add the files.&lt;/li>
&lt;li>Add the &lt;code>images&lt;/code> directory into the jar file manually.&lt;/li>
&lt;/ol>
&lt;p>Due to my laziness, I take the latter one. It deserves better solution.&lt;/p>
&lt;h3 id="problem-2">Problem 2&lt;/h3>
&lt;p>&lt;strong>Problem Description:&lt;/strong> The input and output have been restricted into binary values, which are required by the simulator yet are not that human friendly.&lt;br>
&lt;strong>Possible Solution:&lt;/strong> One encode module to translate the input decimal integers into corresponding bianry values, then feeding them into the simulator. One decode module to translate the output bianry value into corresponding decimal integer, then displaying out.&lt;/p>
&lt;h2 id="more-on-the-simulator">More on the Simulator&lt;/h2>
&lt;p>If you have any ideas on the project, please feel free to let me know. You can try following ways to keep us in touch.&lt;/p>
&lt;ol>
&lt;li>Comment on this post. This is highly recommended.&lt;/li>
&lt;li>Fork the project, and push the new version to me.&lt;/li>
&lt;li>Email me.&lt;/li>
&lt;/ol></description></item></channel></rss>